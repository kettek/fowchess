behavior Board(width, height)
  init
    add .Board
    add .perspective
    make <div.cells/> called table
    set table's style to `grid-template-rows: repeat(${height}, var(--cellSize)); grid-template-columns: repeat(${width}, var(--cellSize))`
    set y to 0
    repeat height times
      set x to 0
      repeat width times
        make <div.cell/> called cell
        if isOdd(y) then
          if isOdd(x) then
            add .white to cell
          else
            add .black to cell
          end
        else
          if isOdd(x) then
            add .black to cell
          else
            add .white to cell
          end
        end
        set cell's @script to 'install Cell'
        set cell's id to x + 'x' + y
        set cell's @x to x
        set cell's @y to y
        put cell at the end of table
        set x to x+1
      end
      set y to y+1
    end
    put table into me
  end
  -- ehh...
  on board from GameUpdates
    -- clear old board
    remove <div.Piece/>
    -- make new board
    set board to JSON.parse(event.data)
    for cell in board
      set targetCellId to cell.x + 'x' + cell.y
      set targetCell to #{targetCellId}
      if targetCell
        make <div.Piece/> called piece
        set piece's @draggable to true
        set piece's @script to 'install Piece'
        add .{cell.piece} to piece
        add .{cell.color} to piece
        set piece's @data-piece to cell.piece
        set piece's @data-color to cell.color
        put piece into targetCell
      end
    end
  end
  on move from GameUpdates
    set action to JSON.parse(event.data)
    set from_x to action.from.x as Number
    set from_y to action.from.y as Number
    set to_x to action.to.x as Number
    set to_y to action.to.y as Number

    set fromCell to #{from_x + 'x' + from_y}
    set toCell to #{to_x + 'x' + to_y}

    put fromCell's children into toCell
  end
  on take from GameUpdates
    set action to JSON.parse(event.data)
    set from_x to action.from.x as Number
    set from_y to action.from.y as Number
    set to_x to action.to.x as Number
    set to_y to action.to.y as Number

    set fromCell to #{from_x + 'x' + from_y}
    set toCell to #{to_x + 'x' + to_y}

    set piece to the first children of toCell
    if the piece's @data-color is 'black' then
      put toCell's children at the end of #leftTray
    else
      put toCell's children at the end of #rightTray
    end
    put fromCell's children into toCell
  end
end

behavior Piece
  on dragstart(clientX, clientY)
    set event.dataTransfer.effectAllowed to 'move'
    call event.dataTransfer.setDragImage(me, 0, 0)
    call event.dataTransfer.setData('untake', JSON.stringify({id: my id, piece: @data-piece, color: @data-color}))
  end
end

behavior Cell
  on dragstart(clientX, clientY)
    set piece to the first <div.Piece/> in me
    if piece then
      add .held to piece
      set event.dataTransfer.effectAllowed to 'move'
      call event.dataTransfer.setDragImage(piece, 0, 0)
      call event.dataTransfer.setData('from', JSON.stringify({id: my id, x: @x, y: @y}))
      -- TODO: We could target all <td/>s, then check if each would be a valid location, and if so, set '.valid', otherwise '.invalid'. These would then be cleared on dragend.
    end
  end
  on dragend
    remove .held from event.originalTarget
  end
  on dragenter
    halt the event
  end
  on dragover
    halt the event
    -- TODO: Check if the move would be valid?
    set event.dataTransfer.dropEffect to 'move'
    add .targetTile
  end
  on dragleave or drop
    remove .targetTile
  end
  on drop
    set myPiece to the first <div.Piece/> in me
    if event.dataTransfer.getData('from') then
      set msg to JSON.parse(event.dataTransfer.getData('from'))
      fetch `/games/${#game's @game_id}/move` as json with headers: {'Content-Type': 'application/json'}, method:"PATCH", body: JSON.stringify({id: localStorage.getItem('id'), from: {x: msg.x, y: msg.y}, to: {x: @x, y: @y}})
    else
      if event.dataTransfer.getData('untake') then
      set msg to JSON.parse(event.dataTransfer.getData('untake'))
      fetch `/games/${#game's @game_id}/untake` as json with headers: {'Content-Type': 'application/json'}, method:"PATCH", body: JSON.stringify({id: localStorage.getItem('id'), piece: msg.piece, color: msg.color, to: {x: @x, y: @y}})
      end
    end
  end
end