behavior Board(width, height)
  init
    add .Board
    add .perspective
    make <table.board/> called table
    repeat height times
      make <tr/> called row
      repeat width times
        make <td/> called cell
        set cell's @script to 'install Cell'
        set cell's id to row's children's length + 'x' + table's children's length
        set cell's @x to row's children's length
        set cell's @y to table's children's length
        put cell at the end of row
      end
      put row at the end of table
    end
    put table into me
  end
  -- ehh...
  on board from GameUpdates
    -- clear old board
    remove <div.Piece/>
    -- make new board
    set board to JSON.parse(event.data)
    for cell in board
      set targetCellId to cell.x + 'x' + cell.y
      set targetCell to #{targetCellId}
      if targetCell
        make <div.Piece/> called piece
        set piece's @draggable to true
        set piece's @script to 'install Piece'
        add .{cell.piece} to piece
        add .{cell.color} to piece
        put piece into targetCell
      end
    end
  end
  on move from GameUpdates
    set action to JSON.parse(event.data)
    set from_x to action.from.x as Number
    set from_y to action.from.y as Number
    set to_x to action.to.x as Number
    set to_y to action.to.y as Number

    set fromCell to #{from_x + 'x' + from_y}
    set toCell to #{to_x + 'x' + to_y}

    put fromCell's children into toCell
  end
  on take from GameUpdates
    set action to JSON.parse(event.data)
    set from_x to action.from.x as Number
    set from_y to action.from.y as Number
    set to_x to action.to.x as Number
    set to_y to action.to.y as Number

    set fromCell to #{from_x + 'x' + from_y}
    set toCell to #{to_x + 'x' + to_y}

    put toCell's children at the end of #tray
    put fromCell's children into toCell
  end
end

behavior Piece
end

behavior Cell
  on dragstart(clientX, clientY)
    set piece to the first <div.Piece/> in me
    if piece then
      set event.dataTransfer.effectAllowed to 'move'
      call event.dataTransfer.setDragImage(piece, 0, 0)
      call event.dataTransfer.setData('from', JSON.stringify({id: my id, x: @x, y: @y}))
      -- TODO: We could target all <td/>s, then check if each would be a valid location, and if so, set '.valid', otherwise '.invalid'. These would then be cleared on dragend.
    end
  end
  on dragenter
    halt the event
  end
  on dragover
    halt the event
    -- TODO: Check if the move would be valid?
    set event.dataTransfer.dropEffect to 'move'
    add .targetTile
  end
  on dragleave or drop
    remove .targetTile
  end
  on drop
    -- TODO: Send move request.
    set myPiece to the first <div.Piece/> in me
    -- if no myPiece
      set msg to JSON.parse(event.dataTransfer.getData('from'))
      fetch `/games/${#game's @game_id}/move` as json with headers: {'Content-Type': 'application/json'}, method:"PATCH", body: JSON.stringify({id: localStorage.getItem('id'), from: {x: msg.x, y: msg.y}, to: {x: @x, y: @y}})
    -- end
  end
end