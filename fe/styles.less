@whiteTileBackground: #fff;
@blackTileBackground: #000;
@whiteStrokeColor: #fff;
@blackStrokeColor: #bbb;
@borderColor: #777;
@fontSize: 3rem;

:root {
  --cellSize: 4em;
}

* {
  user-select: none;
}

body {
  display: grid;
  width: 100vw;
  height: 100vh;
  margin: 0;
  grid-template-areas:
    "menu menu menu"
    "game game game"
    "game game game"
  ;
  background: #000;
}

.Dialog {
  color: white;
}

#game {
  grid-area: game;
  display: grid;
  grid-template-columns: repeat(3, auto);
  align-content: center;
  justify-content: center;
}

#leftTray, #rightTray {
  position: relative;
  display: flex;
  flex-direction: column;
  margin: 0 calc(var(--cellSize) * 0.5);
  width: var(--cellSize);
  box-shadow: 0 0 1em #777;
  align-items: center;
}
#leftTray::after, #rightTray::after {
  content: ' ';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}
#rightTray {
  flex-direction: column-reverse;
  background: #111;
}
#leftTray {
  background: #111;
}

#sidebar {
  grid-area: side;
}

menu {
  grid-area: menu;
}

#game.perspective:hover {
  .Board, #leftTray, #rightTray {
    transform: rotateX(0deg);
  }
  .Board::before {
    height: 101.75%;
  }
}

#game.perspective {
  perspective: 100vw;

  .Board, #leftTray, #rightTray {
    transform: rotateX(5deg);
    transition: transform 500ms;
  }
}

.Board::before {
  content: ' ';
  position: absolute;
  width: 100%;
  height: 102%;
  display: block;
  background: #111;
  transition: height 500ms;
}

.Board {
  .cells {
    display: grid;
  }

  .cells {
    box-shadow: 0 0 4em #777;
  }
  .cells::after {
    content: ' ';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: radial-gradient(
    circle at 20% 20%,
    rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0)
    );
  }

  .cell {
    border: 1px solid @borderColor;
    overflow: hidden;
    text-align: center;
    font-size: @fontSize;
    position: relative;
    line-height: 1.2em;
  }
  .cell::before {
  content: ' ';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: radial-gradient(
    circle at 20% 20%,
    rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)
    );
  }
  .cell.white {
    background: @whiteTileBackground;
  }
  .cell.black {
    background: @blackTileBackground;
  }
  .cell.targetTile {
    border: 1px dashed red;
  }
}

.cell:hover .Piece {
  font-size: calc(@fontSize * 1.2);
}

.Piece.held {
  // font-size: calc(@fontSize * 3) !important;
}

.Piece {
  display: inline-block;
  position: relative;
  font-size: @fontSize;
  transition: transform 100ms, font-size 100ms;
}
.Piece.black {
  text-shadow: -1px -1px 0 @blackStrokeColor,  1px -1px 0 @blackStrokeColor, -1px 1px 0 @blackStrokeColor, 1px 1px 0 @blackStrokeColor, -2px -2px 0 @blackStrokeColor,  2px -2px 0 @blackStrokeColor, -2px 2px 0 @blackStrokeColor, 2px 2px 0 @blackStrokeColor, -3px -3px 0 @blackStrokeColor,  3px -3px 0 @blackStrokeColor, -3px 3px 0 @blackStrokeColor, 3px 3px 0 @blackStrokeColor
}
.Piece.white {
  text-shadow: -1px -1px 0 @whiteStrokeColor,  1px -1px 0 @whiteStrokeColor, -1px 1px 0 @whiteStrokeColor, 1px 1px 0 @whiteStrokeColor, -2px -2px 0 @whiteStrokeColor,  2px -2px 0 @whiteStrokeColor, -2px 2px 0 @whiteStrokeColor, 2px 2px 0 @whiteStrokeColor, -3px -3px 0 @whiteStrokeColor,  3px -3px 0 @whiteStrokeColor, -3px 3px 0 @whiteStrokeColor, 3px 3px 0 @whiteStrokeColor
}
.Piece::after {
  position: relative;
  left: 0;
  top: 0;
}
.Queen {
  .Piece();
  order: 1;
}
.Queen.black::after {
  content: '♛';
}
.Queen.white::after {
  content: '♕';
}
.King {
  .Piece();
  order: 0;
}
.King.black::after {
  content: '♚';
}
.King.white::after {
  content: '♔';
}
.Bishop {
  .Piece();
  order: 2;
}
.Bishop.black::after {
  content: '♝';
}
.Bishop.white::after {
  content: '♗';
}
.Knight {
  .Piece();
  order: 3;
}
.Knight.black::after {
  content: '♞';
}
.Knight.white::after {
  content: '♘';
}
.Rook {
  .Piece();
  order: 4;
}
.Rook.black::after {
  content: '♜';
}
.Rook.white::after {
  content: '♖';
}
.Pawn {
  .Piece();
  order: 5;
}
.Pawn.black::after {
  content: '♟';
}
.Pawn.white::after {
  content: '♙';
}
